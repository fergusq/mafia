{
	http := require("http_server")
	case := require("case").case
	
	fileutil := require("fileutil")
	mv := fileutil.mv
	rm := fileutil.rm
	logExec := fileutil.logExec
	
	sessions := new map<<Session>>
	session_ids := new list<<integer>>
}

record Session {
	id : integer = {
		id := abs(randomInteger())%10000
		id = abs(randomInteger())%10000 while [ id in session_ids ]
		session_ids += id
		return id
	}()
	players : map<<Player>> = new map<<Player>>
	state : string = "LOBBY"
	substate : string = ""
	cycle : list<<State>> = new list<<State>>([
		new MafiaState(self),
		new KillerState(self),
		new DetectiveState(self),
		new DoctorState(self),
		new DayState(self)
	])
	cycle_position : integer = 0
	broadcasts : list<<string>> = new list<<string>>
	actions : list<<function>> = new list<<function>>
	victims : list<<Player>> = new list<<Player>>
	kill_list : list<<Player>> = new list<<Player>>
	heal_list : list<<Player>> = new list<<Player>>
	
	function pushPlayers {
		keys(self.players) | [self.players[_]]
	}
	
	function cycleState {
		return self.cycle[self.cycle_position%#self.cycle]
	}
}

record Player(name) {
	id : integer = abs(randomInteger())
	name : string = name
	state : string = "LOBBY"
	role : string = ""
	info : string = ""
	
	prev_render : string = ""
}

record State(session) {
	session : Session = session
	
	name : string
	gmText : function
	onIntro : function
	onKill : function = { return FALSE }
	onOK : function = { return FALSE }
	onOutro : function
}

record MafiaState(session) : State(session) {
	name : string = "MAFIA KILLS"
	vote : list = []
	function pushMafia {
		session.pushPlayers | { push p for p if [ p.role = "MAFIA" ] }
	}
	function gmText {
		return `It's night. The mafia wakes up and kills.`
	}
	function onIntro {
		if self.pushMafia | [ _.state = "DEAD" ] do
			session.broadcasts += "The mafia is dead."
			session.substate = "END"
		else
			session.broadcasts += "The mafia wakes up."
			self.pushMafia | p.state = "KILL" for p if [ p.state != "DEAD" ]
			session.substate = "KILL"
		done
	}
	function onKill player, target {
		return FALSE if [ player.state != "KILL" ]
		player.state = "WAIT"
		self.vote += target
		n_mafia := #[session.pushPlayers() | filter { |p|; [p.role = "MAFIA" and p.state != "DEAD"] }]
		errprint "Mafia kills: "..self.vote..", n="..n_mafia
		if [ #self.vote = n_mafia ] do
			self.vote | unorderedCount | pull p, i
			if [ i = n_mafia ] do
				session.kill_list += p
				session.substate = "OUTRO"
			else
				self.pushMafia | p.state = "KILL" for p if [ p.state != "DEAD" ]	
			done
			self.vote = []
		done
		return TRUE
	}
	function onOutro {
		self.pushMafia | p.state = "SLEEP" for p if [ p.state != "DEAD" ]
		session.broadcasts += "The mafia sleeps."
		session.substate = "END"
	}
}

record KillerState(session) : State(session) {
	name : string = "KILLER KILLS"
	function pushKiller {
		session.pushPlayers | { push p for p if [ p.role = "KILLER" ] }
	}
	function gmText {
		return `It's night. The killer wakes up and kills.`
	}
	function onIntro {
		killer := self.pushKiller()
		if [ killer.state = "DEAD" ] do
			session.broadcasts += "The killer is dead."
			session.substate = "END"
			return
		done
		session.broadcasts += "The killer wakes up."
		killer.state = "KILL"
		session.substate = "KILL"
	}
	function onKill player, target {
		return FALSE unless [ player.role = "KILLER" and player.state = "KILL" ]
		session.kill_list += target
		session.substate = "OUTRO"
		player.state = "WAIT"
		return TRUE
	}
	function onOutro {
		killer := self.pushKiller()
		killer.state = "SLEEP"
		session.broadcasts += "The killer sleeps."
		session.substate = "END"
	}
}

record DoctorState(session) : State(session) {
	name : string = "DOCTOR HEALS"
	function pushDoctor {
		session.pushPlayers | { push p for p if [ p.role = "DOCTOR" ] }
	}
	function gmText {
		return `It's night. The doctor wakes up and heals.`
	}
	function onIntro {
		player := self.pushDoctor()
		if [ player.state = "DEAD" ] do
			session.broadcasts += "The doctor is dead."
			session.substate = "END"
			return
		done
		session.broadcasts += "The doctor wakes up."
		player.state = "KILL"
		session.substate = "KILL"
	}
	function onKill player, target {
		return FALSE unless [ player.role = "DOCTOR" and player.state = "KILL" ]
		session.heal_list += target
		session.substate = "OUTRO"
		player.state = "WAIT"
		return TRUE
	}
	function onOutro {
		player := self.pushDoctor()
		player.state = "SLEEP"
		session.broadcasts += "The doctor sleeps."
		session.substate = "END"
	}
}

record DetectiveState(session) : State(session) {
	name : string = "INVESTIGATION"
	function pushDetective {
		session.pushPlayers | { push p for p if [ p.role = "DETECTIVE" ] }
	}
	function gmText {
		return `It's night. The detective wakes up.`
	}
	function onIntro {
		player := self.pushDetective()
		if [ player.state = "DEAD" ] do
			session.broadcasts += "The detective is dead."
			session.substate = "END"
			return
		done
		session.broadcasts += "The detective wakes up."
		player.state = "KILL"
		session.substate = "KILL"
	}
	function onKill player, target {
		return FALSE unless [ player.role = "DETECTIVE" and player.state = "KILL" ]
		session.substate = "INFO"
		player.state = "INFO"
		player.info = `${target.name} is MAFIA.` if [ target.role = "MAFIA" ]
		player.info = `${target.name} is NOT MAFIA.` if [ target.role != "MAFIA" ]
		return TRUE
	}
	function onOK player {
		return FALSE unless [ player.role = "DETECTIVE" and player.state = "INFO" ]
		session.substate = "OUTRO"
		player.state = "WAIT"
		player.info = ""
		return TRUE
	}
	function onOutro {
		player := self.pushDetective()
		player.state = "SLEEP"
		session.broadcasts += "The detective sleeps."
		session.substate = "END"
	}
}

record DayState(session) : State(session) {
	name : string = "DAY"
	vote : list = []
	message : list = []
	n_victims : integer = 0
	function newVictims broadcast_nobody {
		new_victims := session.victims[self.n_victims:]
		push `${v.name} is dead. Their role was ${v.role}.` for v in new_victims
		push `Nobody was killed.` if [ #new_victims = 0 and broadcast_nobody ]
	}
	function checkWin {
		/* Killer */
		for role in ["KILLER", "MAFIA", "TOWN"] do
			if session.pushPlayers | [ p.role = role or p.state = "DEAD" ] for p do
				session.pushPlayers | p.state = "VICTORY" for p if [ p.role = role ]
				session.broadcasts += `The $role has won.`
				session.state = "OUTRO"
				return TRUE
			done
		done
		return FALSE
	}
	function gmText {
		push `It's day. ${[self.newVictims(FALSE)]&" "}`
	}
	function onIntro {
		/* Kill players that were chosen during the night */
		for p in session.kill_list do
			unless [ p in session.heal_list ] do
				p.state = "DEAD"
				session.victims += p unless [ p in session.victims ]
			done
		done
		del session.kill_list[:]
		del session.heal_list[:]
		
		session.broadcasts += `Everybody wakes up. ${[self.newVictims(TRUE)]&" "}`
		self.message = []
		session.actions += { self.n_victims = #session.victims }
		
		unless self.checkWin do
			session.pushPlayers | p.state = "KILL" for p if [ p.state != "DEAD" ]
			session.substate = "KILL"
		done
	}
	function onKill player, target {
		return FALSE if [ player.state != "KILL" ]
		player.state = "WAIT"
		self.vote += target
		n_live := #session.players - #session.victims
		if [ #self.vote = n_live ] do
			self.vote | unorderedCount | for p, i do
				if [ i > n_live/2 ] do
					p.state = "DEAD"
					session.victims += p
					self.message += `${p.name} was killed. Their role was ${p.role}.`
					break
				done
			done
			session.substate = "OUTRO"
			self.vote = []
		done
		return TRUE
	}
	function onOutro {
		session.broadcasts += self.message&" "
		unless self.checkWin do
			session.pushPlayers | p.state = "SLEEP" for p if [ p.state != "DEAD" ]
			session.broadcasts += "Everybody sleeps."
			session.substate = "END"
		done
	}
}

record CommandController : http.Controller {

	/* Game master */
	
	@http.handle "/cmd/new"
	function handleNewGame request {
		session := new Session
		sessions[session.id] = session
		request.send "200 OK", `{"id":${session.id}}`, mime="text/json"
	}
	
	@http.handle "/cmd/broadcast/\\d+"
	function handleBroadcast request {
		(match("/cmd/broadcast/(\\d+)", request.path)[1:]) | pull sid
		session := sessions[sid]
		if [ #session.actions > 0 ] do
			action for action in session.actions
			del session.actions[:]
		done
		if [ session.state = "CYCLE" ] do
			case session.substate | pull(matches, noMatch)
			if matches "INTRO" do
				(session.cycleState().onIntro)
			done
			if matches "OUTRO" do
				(session.cycleState().onOutro)
			done
		done
		if [ #session.broadcasts > 0 ] do
			bc := session.broadcasts&" "
			del session.broadcasts[:]
			id := abs(randomInteger())
			logExec "espeak", "-s", "130", "-w", `bc$id.wav`, bc
			logExec "oggenc", "-o", `tmp/bc$id.ogg`, `bc$id.wav`
			rm `bc$id.wav`
			push `/tmp/bc$id.ogg`
		else
			push ""
		done | pull file
		
		case session.state | pull(matches, noMatch)
		try do
			if matches "LOBBY" do
				n := #session.players
				push `Game id: $sid Players: $n`
				push([`{"text":"Start game","cmd":"/cmd/start/$sid"}`]) if [ n >= 4 ]
				push([]) if [ n < 4 ]
			done
			if matches "INTRO" do
				push `Please follow instructions.`, []
			done
			if matches "OUTRO" do
				push `The game ended.`, []
			done
			if matches "NIGHT" do
				push `It's night.`, []
				session.state = "CYCLE"
				session.substate = "INTRO"
			done
			if matches "CYCLE" do
				push session.cycleState().gmText(), []
				if [ session.state = "CYCLE" and session.substate = "END" ] do
					session.cycle_position ++
					session.substate = "INTRO"
				done
				if { [ session.state = "CYCLE" ]; session.pushPlayers | [ _.state = "DEAD" ] } do
					session.state = "OUTRO"
				done
			done
		catch e
			errprint e.message, "\n"
		done | pull title, buttons
		
		request.send "200 OK", `{"title":"$title","file":"$file","buttons":[${buttons&","}]}`, mime="text/json"
	}
	
	@http.handle "/cmd/start/\\d+"
	function handleStartGame request {
		(match("/cmd/start/(\\d+)", request.path)[1:]) | pull sid
		session := sessions[sid]
		/* shuffle players */
		keys session.players |
			[[randomInteger(), session.players[_]]] |
			sort |
			[_[1]] |
			sum fst=[] |
			pull players
		n := #players
		players[:n//3] | _.role = "MAFIA"
		players[n//3].role = "KILLER"
		players[n//3+1].role = "DETECTIVE"
		players[n//3+2].role = "DOCTOR"
		player.role = "TOWN" for player in players[n//3+3:]
		
		player.state = "INTRO" for player in players
		session.state = "INTRO"
		
		request.send "200 OK", `{}`, mime="text/json"
	}
	
	/* Player */
	
	@http.handle "/cmd/canjoin/\\d+"
	function handleCanJoinGame request {
		(match("/cmd/canjoin/(\\d+)", request.path)[1:]) | pull sid
		result := "true"
		if [ sessions[sid]? ] do
			result = "false" unless [ sessions[sid].state = "LOBBY" ]
		else
			result = "false"
		done
		request.send "200 OK", `{"result":$result}`, mime="text/json"
	}
	
	@http.handle "/cmd/join"
	function handleJoinGame request {
		if [ request.command != "POST" ] do
			request.send403
			return
		done
		session := sessions[request.form["sid"]]
		request.send403 unless [ session.state = "LOBBY" ]
		player := new Player(request.form["name"])
		player.name ~= "[^a-zåäöA-ZÅÄÖ\\- ]", ""
		session.players[player.id] = player
		request.send "200 OK", `{"id":${player.id}}`, mime="text/json"
	}
	
	@http.handle "/cmd/render/\\d+/\\d+"
	function handleRender request {
		(match("/cmd/render/(\\d+)/(\\d+)", request.path)[1:]) | pull sid, pid
		session := sessions[sid]
		player := session.players[pid]
		case player.state | pull(matches, noMatch)
		{
			if matches "LOBBY" do
				push "Please wait.", "Please wait for the game to begin.", []
			done
			if matches "INTRO" do
				push "The game begins.", "Please press the button below to see your role.",
					[`{"text":"Ready","cmd":"/cmd/ready/$sid/$pid"}`]
			done
			if matches "SHOW ROLE" do
				push "Your role is", `${player.role}.<br/><br/>Press the button below when you are ready.`,
					[`{"text":"Ready","cmd":"/cmd/ready/$sid/$pid"}`]
			done
			if matches "SLEEP" do
				push "It's night.", "Please close your eyes and wait for instructions.", []
			done
			if matches "WAIT" do
				push "Please wait.", "Please wait for instructions.", []
			done
			if matches "INFO" do
				push "Info.", player.info, [`{"text":"OK","cmd":"/cmd/ok/$sid/$pid"}`]
			done
			if matches "KILL" do
				case session.cycleState().name | pull matches2, noMatch2
				{ push "Lynch vote.", "Over 1/2 majority required." } if matches2 "DAY"
				{ push "Kill vote.", "Unanimous decision required." } if matches2 "MAFIA KILLS", "KILLER KILLS"
				{ push "Select target.", "You will be told if the target is a member of the mafia." } if matches2 "INVESTIGATION"
				{ push "Select target.", "The person you choose cannot die during this night." } if matches2 "DOCTOR HEALS"
				{ push "Vote.", "Select the target." } if noMatch2
				push([
					session.pushPlayers() |
					push(`{"text":"${p.name}","cmd":"/cmd/kill/$sid/$pid/${p.id}"}`) for p if [ p.state != "DEAD" ]
				])
			done
			if matches "DEAD" do
				push "Game over.", "You are dead.", []
			done
			if matches "VICTORY" do
				push "Victory.", "You are a member of the winning party.", []
			done
			if noMatch do
				push "Error.", "An error happened. Please wait. If the problem stays, the game is probably corrupt.", []
			done
		} | pull title, text, buttons
		content := `"title":"$title","text":"$text","buttons":[${buttons&","}]`
		change := push("true") if [ player.prev_render != content ] else push("false")
		player.prev_render = content
		request.send "200 OK", `{"change":$change,$content}`, mime="text/json"
	}
	
	@http.handle "/cmd/ready/\\d+/\\d+"
	function handleReady request {
		(match("/cmd/ready/(\\d+)/(\\d+)", request.path)[1:]) | pull sid, pid
		session := sessions[sid]
		player := session.players[pid]
		if [ session.state != "INTRO" ] do
			request.send403
			return
		done
		case player.state | pull(matches, noMatch)
		if matches "INTRO" do
			player.state = "SHOW ROLE"
		done
		if matches "SHOW ROLE" do
			player.state = "SLEEP"
			if session.pushPlayers | [ _.state = "SLEEP" ] do
				session.state = "NIGHT"
				session.actions += {
					session.broadcasts += "Everybody sleeps."
				}
			done
		done
		request.send "200 OK", `{}`, mime="text/json"
	}
	
	@http.handle "/cmd/kill/\\d+/\\d+/\\d+"
	function handleKill request {
		(match("/cmd/kill/(\\d+)/(\\d+)/(\\d+)", request.path)[1:]) | pull sid, pid, tid
		session := sessions[sid]
		player := session.players[pid]
		target := session.players[tid]
		if [ session.state != "CYCLE" ] do
			request.send403
			return
		done
		if (session.cycleState().onKill) player, target do
			request.send "200 OK", `{}`, mime="text/json"
		else
			request.send403
		done
	}
	
	@http.handle "/cmd/ok/\\d+/\\d+"
	function handleOK request {
		(match("/cmd/ok/(\\d+)/(\\d+)", request.path)[1:]) | pull sid, pid
		session := sessions[sid]
		player := session.players[pid]
		if [ session.state != "CYCLE" ] do
			request.send403
			return
		done
		if (session.cycleState().onOK) player do
			request.send "200 OK", `{}`, mime="text/json"
		else
			request.send403
		done
	}

	function handle request {
		request.send403
	}
}

record GameController : http.Controller {
	@http.handle "/game/new"
	function handleNew request {
		request.sendFile mimeType("gm.html"), "gm.html"
	}
	@http.handle "/game/player\\?sid=\\d+"
	function handleJoin request {
		request.sendFile mimeType("player.html"), "player.html"
	}
	@http.handle "/game/index"
	function handleIndex request {
		request.sendFile mimeType("index.html"), "index.html"
	}

	function handle request {
		request.send403
	}
}

record StaticController : http.Controller {
	@http.handle "/static/([^/]+)"
	function handleStatic request {
		matches := match("/static/([^/]+)", request.path)
		file := "static/"..matches[1]
		if fileExists(file) do
			request.sendFile mimeType(file), file
			return
		done
		request.send404
	}
	@http.handle "/tmp/([^/]+)"
	function handleTmp request {
		matches := match("/tmp/([^/]+)", request.path)
		file := "tmp/"..matches[1]
		if fileExists(file) do
			request.sendFile mimeType(file), file
			rm file
			return
		done
		request.send404
	}

	function handle request {
		request.send403
	}
}

main {	
	hs := new http.HttpServer(25565)
	hs.controllers["/"] = http.controller({ |request|
		request.redirect "/game/index"
	})
	
	static_and_tmp := new StaticController
	hs.controllers["/static"] = static_and_tmp
	hs.controllers["/tmp"] = static_and_tmp
	hs.controllers["/game"] = new GameController
	hs.controllers["/cmd"] = new CommandController
	
	date = "["..[bufferedExec("date", "+%d.%m.%Y/%H:%M")][0].."]"
	print date.." Started."
	while true; do
		hs.update
	done
}
